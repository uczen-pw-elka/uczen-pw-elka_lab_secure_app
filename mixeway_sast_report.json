[{"name":"Field isn\u0027t final but should be","scannerType":"SAST","description":"\n\n   \u003cp\u003e\nThis static field public but not final, and\ncould be changed by malicious code or\n        by accident from another package.\n        The field could be made final to avoid\n        this vulnerability.\u003c/p\u003e\n\n    ","filename":"com/appsecco/dvja/Constant.java","line":"4","severity":"Low","category":"MALICIOUS_CODE"},{"name":"Field isn\u0027t final but should be","scannerType":"SAST","description":"\n\n   \u003cp\u003e\nThis static field public but not final, and\ncould be changed by malicious code or\n        by accident from another package.\n        The field could be made final to avoid\n        this vulnerability.\u003c/p\u003e\n\n    ","filename":"com/appsecco/dvja/Constant.java","line":"6","severity":"Low","category":"MALICIOUS_CODE"},{"name":"Field isn\u0027t final but should be","scannerType":"SAST","description":"\n\n   \u003cp\u003e\nThis static field public but not final, and\ncould be changed by malicious code or\n        by accident from another package.\n        The field could be made final to avoid\n        this vulnerability.\u003c/p\u003e\n\n    ","filename":"com/appsecco/dvja/Constant.java","line":"7","severity":"Low","category":"MALICIOUS_CODE"},{"name":"Field isn\u0027t final but should be","scannerType":"SAST","description":"\n\n   \u003cp\u003e\nThis static field public but not final, and\ncould be changed by malicious code or\n        by accident from another package.\n        The field could be made final to avoid\n        this vulnerability.\u003c/p\u003e\n\n    ","filename":"com/appsecco/dvja/Constant.java","line":"5","severity":"Low","category":"MALICIOUS_CODE"},{"name":"Potentially sensitive data in a cookie","scannerType":"SAST","description":"\n            \n\u003cp\u003eThe information stored in a custom cookie should not be sensitive or related to the session. In most cases, sensitive data should only be stored in session\nand referenced by the user\u0027s session cookie. See HttpSession (\u003ccode\u003eHttpServletRequest.getSession()\u003c/code\u003e)\u003c/p\u003e\n\u003cp\u003eCustom cookies can be used for information that needs to live longer than and is independent of a specific session.\u003c/p\u003e\n\u003cbr/\u003e\n\u003cp\u003e\n\u003cb\u003eReference\u003c/b\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://cwe.mitre.org/data/definitions/315.html\"\u003eCWE-315: Cleartext Storage of Sensitive Information in a Cookie\u003c/a\u003e\n\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/controllers/ApiAction.java","line":"40","severity":"Low","category":"SECURITY"},{"name":"Found Struts 2 endpoint","scannerType":"SAST","description":"\n            \n\u003cp\u003eIn Struts 2, the endpoints are Plain Old Java Objects (POJO) which means no Interface/Class needs to be implemented/extended.\u003c/p\u003e\n\u003cp\u003eWhen a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn\u0027t include those values.\nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/controllers/Home.java","line":"8","severity":"Low","category":"SECURITY"},{"name":"Found Struts 2 endpoint","scannerType":"SAST","description":"\n            \n\u003cp\u003eIn Struts 2, the endpoints are Plain Old Java Objects (POJO) which means no Interface/Class needs to be implemented/extended.\u003c/p\u003e\n\u003cp\u003eWhen a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn\u0027t include those values.\nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/controllers/Login.java","line":"7","severity":"Low","category":"SECURITY"},{"name":"Potential Command Injection","scannerType":"SAST","description":"\n            \n\u003cp\u003eThe highlighted API is used to execute a system command. If unfiltered input is passed to this API, it can lead to arbitrary command execution.\u003c/p\u003e\n\u003cbr/\u003e\n\u003cp\u003e\n    \u003cb\u003eVulnerable Code:\u003c/b\u003e\u003cbr/\u003e\n\u003cpre\u003eimport java.lang.Runtime;\n\nRuntime r \u003d Runtime.getRuntime();\nr.exec(\"/bin/sh -c some_tool\" + input);\u003c/pre\u003e\n\u003c/p\u003e\n\u003cp\u003e\n\u003cb\u003eReferences\u003c/b\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://www.owasp.org/index.php/Command_Injection\"\u003eOWASP: Command Injection\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\"\u003eOWASP: Top 10 2013-A1-Injection\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://cwe.mitre.org/data/definitions/78.html\"\u003eCWE-78: Improper Neutralization of Special Elements used in an OS Command (\u0027OS Command Injection\u0027)\u003c/a\u003e\n\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/controllers/PingAction.java","line":"45","severity":"Medium","category":"SECURITY"},{"name":"Found Struts 2 endpoint","scannerType":"SAST","description":"\n            \n\u003cp\u003eIn Struts 2, the endpoints are Plain Old Java Objects (POJO) which means no Interface/Class needs to be implemented/extended.\u003c/p\u003e\n\u003cp\u003eWhen a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn\u0027t include those values.\nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/controllers/PingAction.java","line":"9","severity":"Low","category":"SECURITY"},{"name":"Found Struts 2 endpoint","scannerType":"SAST","description":"\n            \n\u003cp\u003eIn Struts 2, the endpoints are Plain Old Java Objects (POJO) which means no Interface/Class needs to be implemented/extended.\u003c/p\u003e\n\u003cp\u003eWhen a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn\u0027t include those values.\nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/controllers/ProductAction.java","line":"11","severity":"Low","category":"SECURITY"},{"name":"Found Struts 2 endpoint","scannerType":"SAST","description":"\n            \n\u003cp\u003eIn Struts 2, the endpoints are Plain Old Java Objects (POJO) which means no Interface/Class needs to be implemented/extended.\u003c/p\u003e\n\u003cp\u003eWhen a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn\u0027t include those values.\nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/controllers/RedirectAction.java","line":"5","severity":"Low","category":"SECURITY"},{"name":"Found Struts 2 endpoint","scannerType":"SAST","description":"\n            \n\u003cp\u003eIn Struts 2, the endpoints are Plain Old Java Objects (POJO) which means no Interface/Class needs to be implemented/extended.\u003c/p\u003e\n\u003cp\u003eWhen a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn\u0027t include those values.\nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/controllers/Register.java","line":"7","severity":"Low","category":"SECURITY"},{"name":"Found Struts 2 endpoint","scannerType":"SAST","description":"\n            \n\u003cp\u003eIn Struts 2, the endpoints are Plain Old Java Objects (POJO) which means no Interface/Class needs to be implemented/extended.\u003c/p\u003e\n\u003cp\u003eWhen a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn\u0027t include those values.\nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/controllers/ResetPassword.java","line":"6","severity":"Low","category":"SECURITY"},{"name":"May expose internal representation by returning reference to mutable object","scannerType":"SAST","description":"\n\n  \u003cp\u003e Returning a reference to a mutable object value stored in one of the object\u0027s fields\n  exposes the internal representation of the object.\u0026nbsp;\n   If instances\n   are accessed by untrusted code, and unchecked changes to\n   the mutable object would compromise security or other\n   important properties, you will need to do something different.\n  Returning a new copy of the object is better approach in many situations.\u003c/p\u003e\n\n    ","filename":"com/appsecco/dvja/models/Product.java","line":"77","severity":"Low","category":"MALICIOUS_CODE"},{"name":"May expose internal representation by returning reference to mutable object","scannerType":"SAST","description":"\n\n  \u003cp\u003e Returning a reference to a mutable object value stored in one of the object\u0027s fields\n  exposes the internal representation of the object.\u0026nbsp;\n   If instances\n   are accessed by untrusted code, and unchecked changes to\n   the mutable object would compromise security or other\n   important properties, you will need to do something different.\n  Returning a new copy of the object is better approach in many situations.\u003c/p\u003e\n\n    ","filename":"com/appsecco/dvja/models/Product.java","line":"85","severity":"Low","category":"MALICIOUS_CODE"},{"name":"May expose internal representation by incorporating reference to mutable object","scannerType":"SAST","description":"\n\n  \u003cp\u003e This code stores a reference to an externally mutable object into the\n  internal representation of the object.\u0026nbsp;\n   If instances\n   are accessed by untrusted code, and unchecked changes to\n   the mutable object would compromise security or other\n   important properties, you will need to do something different.\n  Storing a copy of the object is better approach in many situations.\u003c/p\u003e\n\n    ","filename":"com/appsecco/dvja/models/Product.java","line":"81","severity":"Low","category":"MALICIOUS_CODE"},{"name":"May expose internal representation by incorporating reference to mutable object","scannerType":"SAST","description":"\n\n  \u003cp\u003e This code stores a reference to an externally mutable object into the\n  internal representation of the object.\u0026nbsp;\n   If instances\n   are accessed by untrusted code, and unchecked changes to\n   the mutable object would compromise security or other\n   important properties, you will need to do something different.\n  Storing a copy of the object is better approach in many situations.\u003c/p\u003e\n\n    ","filename":"com/appsecco/dvja/models/Product.java","line":"89","severity":"Low","category":"MALICIOUS_CODE"},{"name":"Potential CRLF Injection for logs","scannerType":"SAST","description":"\n            \n\u003cp\u003e\n    When data from an untrusted source is put into a logger and not neutralized correctly,\n    an attacker could forge log entries or include malicious content.\n    Inserted false entries could be used to skew statistics, distract the administrator\n    or even to implicate another party in the commission of a malicious act.\n    If the log file is processed automatically, the attacker can render the file unusable\n    by corrupting the format of the file or injecting unexpected characters.\n    An attacker may also inject code or other commands into the log file and take advantage\n    of a vulnerability in the log processing utility (e.g. command injection or XSS).\n\u003c/p\u003e\n\u003cbr/\u003e\n\u003cp\u003e\n\u003cb\u003eCode at risk:\u003c/b\u003e\u003cbr/\u003e\n\u003cpre\u003eString val \u003d request.getParameter(\"user\");\nString metadata \u003d request.getParameter(\"metadata\");\n[...]\nif(authenticated) {\n    log.info(\"User \" + val + \" (\" + metadata + \") was authenticated successfully\");\n}\nelse {\n    log.info(\"User \" + val + \" (\" + metadata + \") was not authenticated\");\n}\n\u003c/pre\u003e\n\nA malicious user could send the metadata parameter with the value: \u003ccode\u003e\"Firefox) was authenticated successfully\\r\\n[INFO] User bbb (Internet Explorer\"\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003cb\u003eSolution:\u003c/b\u003e\u003cbr/\u003e\n\u003cp\u003e\nYou can manually sanitize each parameter.\n\u003cpre\u003e\nlog.info(\"User \" + val.replaceAll(\"[\\r\\n]\",\"\") + \" (\" + userAgent.replaceAll(\"[\\r\\n]\",\"\") + \") was not authenticated\");\n\u003c/pre\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nYou can also configure your logger service to replace new line for all message events. Here is sample configuration for LogBack \u003ca href\u003d\"https://logback.qos.ch/manual/layouts.html#replace\"\u003eusing the \u003ccode\u003ereplace\u003c/code\u003e function\u003c/a\u003e.\n\u003cpre\u003e\n\u0026lt;pattern\u0026gt;%-5level - %replace(%msg){\u0027[\\r\\n]\u0027, \u0027\u0027}%n\u0026lt;/pattern\u0026gt;\n\u003c/pre\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nFinally, you can use a logger implementation that replace new line by spaces.\nThe project \u003ca href\u003d\"https://github.com/javabeanz/owasp-security-logging\"\u003eOWASP Security Logging\u003c/a\u003e has an implementation for Logback and Log4j.\n\u003c/p\u003e\n\n\u003cbr/\u003e\n\u003cp\u003e\n    \u003cb\u003eReferences\u003c/b\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE-117: Improper Output Neutralization for Logs\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/93.html\"\u003eCWE-93: Improper Neutralization of CRLF Sequences (\u0027CRLF Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://logback.qos.ch/manual/layouts.html#replace\"\u003eCWE-93: Improper Neutralization of CRLF Sequences (\u0027CRLF Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://github.com/javabeanz/owasp-security-logging\"\u003eOWASP Security Logging\u003c/a\u003e\u003cbr/\u003e\n\u003c/p\u003e\n\n\n        ","filename":"com/appsecco/dvja/services/ProductService.java","line":"28","severity":"Low","category":"SECURITY"},{"name":"Potential SQL/JPQL Injection (JPA)","scannerType":"SAST","description":"\n            \n\u003cp\u003e\nThe input values included in SQL queries need to be passed in safely.\nBind variables in prepared statements can be used to easily mitigate the risk of SQL injection.\n\u003c/p\u003e\n\u003cp\u003e\n    \u003cb\u003eVulnerable Code:\u003c/b\u003e\u003cbr/\u003e\n    \u003cpre\u003e\nEntityManager pm \u003d getEM();\n\nTypedQuery\u0026lt;UserEntity\u0026gt; q \u003d em.createQuery(\n    String.format(\"select * from Users where name \u003d %s\", username),\n    UserEntity.class);\n\nUserEntity res \u003d q.getSingleResult();\u003c/pre\u003e\n\u003c/p\u003e\n\u003cp\u003e\n    \u003cb\u003eSolution:\u003c/b\u003e\u003cbr/\u003e\n    \u003cpre\u003e\nTypedQuery\u0026lt;UserEntity\u0026gt; q \u003d em.createQuery(\n    \"select * from Users where name \u003d usernameParam\",UserEntity.class)\n    .setParameter(\"usernameParam\", username);\n\nUserEntity res \u003d q.getSingleResult();\u003c/pre\u003e\n\u003c/p\u003e\n\u003cbr/\u003e\n\u003cp\u003e\n\u003cb\u003eReferences (JPA)\u003c/b\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javaee/6/tutorial/doc/bnbrg.html\"\u003eThe Java EE 6 Tutorial: Creating Queries Using the Java Persistence Query Language\u003c/a\u003e\u003cbr/\u003e\n\u003cb\u003eReferences (SQL injection)\u003c/b\u003e\u003cbr/\u003e\n\u003ca href\u003d\"http://projects.webappsec.org/w/page/13246963/SQL%20Injection\"\u003eWASC-19: SQL Injection\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://capec.mitre.org/data/definitions/66.html\"\u003eCAPEC-66: SQL Injection\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE-89: Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\"\u003eOWASP: Top 10 2013-A1-Injection\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet\"\u003eOWASP: SQL Injection Prevention Cheat Sheet\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet\"\u003eOWASP: Query Parameterization Cheat Sheet\u003c/a\u003e\u003cbr/\u003e\n\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/services/ProductService.java","line":"48","severity":"Medium","category":"SECURITY"},{"name":"Potential CRLF Injection for logs","scannerType":"SAST","description":"\n            \n\u003cp\u003e\n    When data from an untrusted source is put into a logger and not neutralized correctly,\n    an attacker could forge log entries or include malicious content.\n    Inserted false entries could be used to skew statistics, distract the administrator\n    or even to implicate another party in the commission of a malicious act.\n    If the log file is processed automatically, the attacker can render the file unusable\n    by corrupting the format of the file or injecting unexpected characters.\n    An attacker may also inject code or other commands into the log file and take advantage\n    of a vulnerability in the log processing utility (e.g. command injection or XSS).\n\u003c/p\u003e\n\u003cbr/\u003e\n\u003cp\u003e\n\u003cb\u003eCode at risk:\u003c/b\u003e\u003cbr/\u003e\n\u003cpre\u003eString val \u003d request.getParameter(\"user\");\nString metadata \u003d request.getParameter(\"metadata\");\n[...]\nif(authenticated) {\n    log.info(\"User \" + val + \" (\" + metadata + \") was authenticated successfully\");\n}\nelse {\n    log.info(\"User \" + val + \" (\" + metadata + \") was not authenticated\");\n}\n\u003c/pre\u003e\n\nA malicious user could send the metadata parameter with the value: \u003ccode\u003e\"Firefox) was authenticated successfully\\r\\n[INFO] User bbb (Internet Explorer\"\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003cb\u003eSolution:\u003c/b\u003e\u003cbr/\u003e\n\u003cp\u003e\nYou can manually sanitize each parameter.\n\u003cpre\u003e\nlog.info(\"User \" + val.replaceAll(\"[\\r\\n]\",\"\") + \" (\" + userAgent.replaceAll(\"[\\r\\n]\",\"\") + \") was not authenticated\");\n\u003c/pre\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nYou can also configure your logger service to replace new line for all message events. Here is sample configuration for LogBack \u003ca href\u003d\"https://logback.qos.ch/manual/layouts.html#replace\"\u003eusing the \u003ccode\u003ereplace\u003c/code\u003e function\u003c/a\u003e.\n\u003cpre\u003e\n\u0026lt;pattern\u0026gt;%-5level - %replace(%msg){\u0027[\\r\\n]\u0027, \u0027\u0027}%n\u0026lt;/pattern\u0026gt;\n\u003c/pre\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nFinally, you can use a logger implementation that replace new line by spaces.\nThe project \u003ca href\u003d\"https://github.com/javabeanz/owasp-security-logging\"\u003eOWASP Security Logging\u003c/a\u003e has an implementation for Logback and Log4j.\n\u003c/p\u003e\n\n\u003cbr/\u003e\n\u003cp\u003e\n    \u003cb\u003eReferences\u003c/b\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE-117: Improper Output Neutralization for Logs\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/93.html\"\u003eCWE-93: Improper Neutralization of CRLF Sequences (\u0027CRLF Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://logback.qos.ch/manual/layouts.html#replace\"\u003eCWE-93: Improper Neutralization of CRLF Sequences (\u0027CRLF Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://github.com/javabeanz/owasp-security-logging\"\u003eOWASP Security Logging\u003c/a\u003e\u003cbr/\u003e\n\u003c/p\u003e\n\n\n        ","filename":"com/appsecco/dvja/services/UserService.java","line":"93","severity":"Low","category":"SECURITY"},{"name":"Potential CRLF Injection for logs","scannerType":"SAST","description":"\n            \n\u003cp\u003e\n    When data from an untrusted source is put into a logger and not neutralized correctly,\n    an attacker could forge log entries or include malicious content.\n    Inserted false entries could be used to skew statistics, distract the administrator\n    or even to implicate another party in the commission of a malicious act.\n    If the log file is processed automatically, the attacker can render the file unusable\n    by corrupting the format of the file or injecting unexpected characters.\n    An attacker may also inject code or other commands into the log file and take advantage\n    of a vulnerability in the log processing utility (e.g. command injection or XSS).\n\u003c/p\u003e\n\u003cbr/\u003e\n\u003cp\u003e\n\u003cb\u003eCode at risk:\u003c/b\u003e\u003cbr/\u003e\n\u003cpre\u003eString val \u003d request.getParameter(\"user\");\nString metadata \u003d request.getParameter(\"metadata\");\n[...]\nif(authenticated) {\n    log.info(\"User \" + val + \" (\" + metadata + \") was authenticated successfully\");\n}\nelse {\n    log.info(\"User \" + val + \" (\" + metadata + \") was not authenticated\");\n}\n\u003c/pre\u003e\n\nA malicious user could send the metadata parameter with the value: \u003ccode\u003e\"Firefox) was authenticated successfully\\r\\n[INFO] User bbb (Internet Explorer\"\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003cb\u003eSolution:\u003c/b\u003e\u003cbr/\u003e\n\u003cp\u003e\nYou can manually sanitize each parameter.\n\u003cpre\u003e\nlog.info(\"User \" + val.replaceAll(\"[\\r\\n]\",\"\") + \" (\" + userAgent.replaceAll(\"[\\r\\n]\",\"\") + \") was not authenticated\");\n\u003c/pre\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nYou can also configure your logger service to replace new line for all message events. Here is sample configuration for LogBack \u003ca href\u003d\"https://logback.qos.ch/manual/layouts.html#replace\"\u003eusing the \u003ccode\u003ereplace\u003c/code\u003e function\u003c/a\u003e.\n\u003cpre\u003e\n\u0026lt;pattern\u0026gt;%-5level - %replace(%msg){\u0027[\\r\\n]\u0027, \u0027\u0027}%n\u0026lt;/pattern\u0026gt;\n\u003c/pre\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nFinally, you can use a logger implementation that replace new line by spaces.\nThe project \u003ca href\u003d\"https://github.com/javabeanz/owasp-security-logging\"\u003eOWASP Security Logging\u003c/a\u003e has an implementation for Logback and Log4j.\n\u003c/p\u003e\n\n\u003cbr/\u003e\n\u003cp\u003e\n    \u003cb\u003eReferences\u003c/b\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE-117: Improper Output Neutralization for Logs\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/93.html\"\u003eCWE-93: Improper Neutralization of CRLF Sequences (\u0027CRLF Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://logback.qos.ch/manual/layouts.html#replace\"\u003eCWE-93: Improper Neutralization of CRLF Sequences (\u0027CRLF Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://github.com/javabeanz/owasp-security-logging\"\u003eOWASP Security Logging\u003c/a\u003e\u003cbr/\u003e\n\u003c/p\u003e\n\n\n        ","filename":"com/appsecco/dvja/services/UserService.java","line":"104","severity":"Low","category":"SECURITY"},{"name":"Potential CRLF Injection for logs","scannerType":"SAST","description":"\n            \n\u003cp\u003e\n    When data from an untrusted source is put into a logger and not neutralized correctly,\n    an attacker could forge log entries or include malicious content.\n    Inserted false entries could be used to skew statistics, distract the administrator\n    or even to implicate another party in the commission of a malicious act.\n    If the log file is processed automatically, the attacker can render the file unusable\n    by corrupting the format of the file or injecting unexpected characters.\n    An attacker may also inject code or other commands into the log file and take advantage\n    of a vulnerability in the log processing utility (e.g. command injection or XSS).\n\u003c/p\u003e\n\u003cbr/\u003e\n\u003cp\u003e\n\u003cb\u003eCode at risk:\u003c/b\u003e\u003cbr/\u003e\n\u003cpre\u003eString val \u003d request.getParameter(\"user\");\nString metadata \u003d request.getParameter(\"metadata\");\n[...]\nif(authenticated) {\n    log.info(\"User \" + val + \" (\" + metadata + \") was authenticated successfully\");\n}\nelse {\n    log.info(\"User \" + val + \" (\" + metadata + \") was not authenticated\");\n}\n\u003c/pre\u003e\n\nA malicious user could send the metadata parameter with the value: \u003ccode\u003e\"Firefox) was authenticated successfully\\r\\n[INFO] User bbb (Internet Explorer\"\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003cb\u003eSolution:\u003c/b\u003e\u003cbr/\u003e\n\u003cp\u003e\nYou can manually sanitize each parameter.\n\u003cpre\u003e\nlog.info(\"User \" + val.replaceAll(\"[\\r\\n]\",\"\") + \" (\" + userAgent.replaceAll(\"[\\r\\n]\",\"\") + \") was not authenticated\");\n\u003c/pre\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nYou can also configure your logger service to replace new line for all message events. Here is sample configuration for LogBack \u003ca href\u003d\"https://logback.qos.ch/manual/layouts.html#replace\"\u003eusing the \u003ccode\u003ereplace\u003c/code\u003e function\u003c/a\u003e.\n\u003cpre\u003e\n\u0026lt;pattern\u0026gt;%-5level - %replace(%msg){\u0027[\\r\\n]\u0027, \u0027\u0027}%n\u0026lt;/pattern\u0026gt;\n\u003c/pre\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nFinally, you can use a logger implementation that replace new line by spaces.\nThe project \u003ca href\u003d\"https://github.com/javabeanz/owasp-security-logging\"\u003eOWASP Security Logging\u003c/a\u003e has an implementation for Logback and Log4j.\n\u003c/p\u003e\n\n\u003cbr/\u003e\n\u003cp\u003e\n    \u003cb\u003eReferences\u003c/b\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE-117: Improper Output Neutralization for Logs\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/93.html\"\u003eCWE-93: Improper Neutralization of CRLF Sequences (\u0027CRLF Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://logback.qos.ch/manual/layouts.html#replace\"\u003eCWE-93: Improper Neutralization of CRLF Sequences (\u0027CRLF Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://github.com/javabeanz/owasp-security-logging\"\u003eOWASP Security Logging\u003c/a\u003e\u003cbr/\u003e\n\u003c/p\u003e\n\n\n        ","filename":"com/appsecco/dvja/services/UserService.java","line":"29","severity":"Low","category":"SECURITY"},{"name":"Potential SQL/JPQL Injection (JPA)","scannerType":"SAST","description":"\n            \n\u003cp\u003e\nThe input values included in SQL queries need to be passed in safely.\nBind variables in prepared statements can be used to easily mitigate the risk of SQL injection.\n\u003c/p\u003e\n\u003cp\u003e\n    \u003cb\u003eVulnerable Code:\u003c/b\u003e\u003cbr/\u003e\n    \u003cpre\u003e\nEntityManager pm \u003d getEM();\n\nTypedQuery\u0026lt;UserEntity\u0026gt; q \u003d em.createQuery(\n    String.format(\"select * from Users where name \u003d %s\", username),\n    UserEntity.class);\n\nUserEntity res \u003d q.getSingleResult();\u003c/pre\u003e\n\u003c/p\u003e\n\u003cp\u003e\n    \u003cb\u003eSolution:\u003c/b\u003e\u003cbr/\u003e\n    \u003cpre\u003e\nTypedQuery\u0026lt;UserEntity\u0026gt; q \u003d em.createQuery(\n    \"select * from Users where name \u003d usernameParam\",UserEntity.class)\n    .setParameter(\"usernameParam\", username);\n\nUserEntity res \u003d q.getSingleResult();\u003c/pre\u003e\n\u003c/p\u003e\n\u003cbr/\u003e\n\u003cp\u003e\n\u003cb\u003eReferences (JPA)\u003c/b\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javaee/6/tutorial/doc/bnbrg.html\"\u003eThe Java EE 6 Tutorial: Creating Queries Using the Java Persistence Query Language\u003c/a\u003e\u003cbr/\u003e\n\u003cb\u003eReferences (SQL injection)\u003c/b\u003e\u003cbr/\u003e\n\u003ca href\u003d\"http://projects.webappsec.org/w/page/13246963/SQL%20Injection\"\u003eWASC-19: SQL Injection\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://capec.mitre.org/data/definitions/66.html\"\u003eCAPEC-66: SQL Injection\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE-89: Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\"\u003eOWASP: Top 10 2013-A1-Injection\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet\"\u003eOWASP: SQL Injection Prevention Cheat Sheet\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet\"\u003eOWASP: Query Parameterization Cheat Sheet\u003c/a\u003e\u003cbr/\u003e\n\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/services/UserService.java","line":"75","severity":"Medium","category":"SECURITY"},{"name":"Found Struts 2 endpoint","scannerType":"SAST","description":"\n            \n\u003cp\u003eIn Struts 2, the endpoints are Plain Old Java Objects (POJO) which means no Interface/Class needs to be implemented/extended.\u003c/p\u003e\n\u003cp\u003eWhen a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn\u0027t include those values.\nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.\u003c/p\u003e\n\n        ","filename":"com/appsecco/example/HelloWorld.java","line":"27","severity":"Low","category":"SECURITY"},{"name":"Found Struts 2 endpoint","scannerType":"SAST","description":"\n            \n\u003cp\u003eIn Struts 2, the endpoints are Plain Old Java Objects (POJO) which means no Interface/Class needs to be implemented/extended.\u003c/p\u003e\n\u003cp\u003eWhen a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn\u0027t include those values.\nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.\u003c/p\u003e\n\n        ","filename":"com/appsecco/example/Login.java","line":"24","severity":"Low","category":"SECURITY"}]